#!/usr/bin/env python3
"""
Agent C: Security Audit Report Generator

This agent converts security findings from Agent B into readable reports
in Markdown and HTML formats for audit documentation.
"""

import json
import logging
from abc import ABC, abstractmethod
from datetime import datetime, timezone
from pathlib import Path
from typing import Any, Dict, List, Optional

import fire
from jinja2 import Environment, FileSystemLoader, Template

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class ReportGeneratorInterface(ABC):
    """Abstract interface for report generators"""

    @abstractmethod
    def generate(self, findings: List[Dict[str, Any]], metadata: Dict[str, Any]) -> str:
        """Generate a report from findings"""
        pass


class MarkdownReportGenerator(ReportGeneratorInterface):
    """Generator for Markdown reports (Obsidian-compatible)"""

    def __init__(self, template_path: Optional[Path] = None):
        self.template_path = template_path
        self._template = None

    def generate(self, findings: List[Dict[str, Any]], metadata: Dict[str, Any]) -> str:
        """Generate Markdown report from findings"""
        if self.template_path and self.template_path.exists():
            return self._generate_from_template(findings, metadata)
        else:
            return self._generate_default_markdown(findings, metadata)

    def _generate_from_template(
        self, findings: List[Dict[str, Any]], metadata: Dict[str, Any]
    ) -> str:
        """Generate report using Jinja2 template"""
        env = Environment(loader=FileSystemLoader(self.template_path.parent))
        template = env.get_template(self.template_path.name)
        return template.render(findings=findings, metadata=metadata)

    def _generate_default_markdown(
        self, findings: List[Dict[str, Any]], metadata: Dict[str, Any]
    ) -> str:
        """Generate default Markdown report without template"""
        lines = []

        # Header
        lines.append("# GCP Security Audit Report")
        lines.append("")
        lines.append(f"**Generated:** {metadata.get('timestamp', 'N/A')}")
        lines.append(f"**Project:** {metadata.get('project_id', 'N/A')}")
        lines.append(f"**Organization:** {metadata.get('organization_id', 'N/A')}")
        lines.append("")

        # Executive Summary
        lines.append("## Executive Summary")
        lines.append("")
        lines.append(self._generate_summary(findings))
        lines.append("")

        # Severity Breakdown
        lines.append("## Severity Breakdown")
        lines.append("")
        lines.append(self._generate_severity_table(findings))
        lines.append("")

        # Detailed Findings
        lines.append("## Detailed Findings")
        lines.append("")

        # Group findings by severity
        for severity in ["HIGH", "MEDIUM", "LOW"]:
            severity_findings = [f for f in findings if f.get("severity") == severity]
            if severity_findings:
                lines.append(f"### {severity} Severity Issues")
                lines.append("")
                for i, finding in enumerate(severity_findings, 1):
                    lines.append(f"#### {i}. {finding.get('title', 'Untitled Finding')}")
                    lines.append("")
                    lines.append(f"**Severity:** {finding.get('severity', 'N/A')}")
                    lines.append("")
                    lines.append("**Description:**")
                    lines.append(f"{finding.get('explanation', 'No description available.')}")
                    lines.append("")
                    lines.append("**Recommendation:**")
                    lines.append(f"{finding.get('recommendation', 'No recommendation available.')}")
                    lines.append("")
                    lines.append("---")
                    lines.append("")

        # Footer
        lines.append("## Report Metadata")
        lines.append("")
        lines.append("- **Report Format:** Markdown")
        lines.append("- **Compatible With:** Obsidian, GitHub, GitLab, etc.")
        lines.append("- **Generated By:** Paddi - Multi-Agent Cloud Audit Tool")
        lines.append("")

        return "\n".join(lines)

    def _generate_summary(self, findings: List[Dict[str, Any]]) -> str:
        """Generate executive summary"""
        total = len(findings)
        high = sum(1 for f in findings if f.get("severity") == "HIGH")
        medium = sum(1 for f in findings if f.get("severity") == "MEDIUM")
        low = sum(1 for f in findings if f.get("severity") == "LOW")

        summary = f"The security audit identified **{total} total findings**:\n\n"
        summary += f"- 🔴 **{high} HIGH** severity issues requiring immediate attention\n"
        summary += f"- 🟡 **{medium} MEDIUM** severity issues to be addressed\n"
        summary += f"- 🟢 **{low} LOW** severity issues for consideration\n"

        if high > 0:
            summary += "\n⚠️ **Action Required:** High severity issues were found that pose significant security risks."

        return summary

    def _generate_severity_table(self, findings: List[Dict[str, Any]]) -> str:
        """Generate severity breakdown table"""
        high = sum(1 for f in findings if f.get("severity") == "HIGH")
        medium = sum(1 for f in findings if f.get("severity") == "MEDIUM")
        low = sum(1 for f in findings if f.get("severity") == "LOW")

        table = "| Severity | Count | Percentage |\n"
        table += "|----------|-------|------------|\n"

        total = len(findings)
        if total > 0:
            table += f"| HIGH     | {high}   | {high/total*100:.1f}%     |\n"
            table += f"| MEDIUM   | {medium} | {medium/total*100:.1f}%   |\n"
            table += f"| LOW      | {low}    | {low/total*100:.1f}%      |\n"
        else:
            table += "| No findings | 0 | 0% |\n"

        return table


class HTMLReportGenerator(ReportGeneratorInterface):
    """Generator for HTML reports"""

    def __init__(self, template_path: Optional[Path] = None):
        self.template_path = template_path

    def generate(self, findings: List[Dict[str, Any]], metadata: Dict[str, Any]) -> str:
        """Generate HTML report from findings"""
        if self.template_path and self.template_path.exists():
            return self._generate_from_template(findings, metadata)
        else:
            return self._generate_default_html(findings, metadata)

    def _generate_from_template(
        self, findings: List[Dict[str, Any]], metadata: Dict[str, Any]
    ) -> str:
        """Generate report using Jinja2 template"""
        env = Environment(loader=FileSystemLoader(self.template_path.parent))
        template = env.get_template(self.template_path.name)
        return template.render(findings=findings, metadata=metadata)

    def _generate_default_html(
        self, findings: List[Dict[str, Any]], metadata: Dict[str, Any]
    ) -> str:
        """Generate default HTML report without template"""
        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GCP Security Audit Report - {metadata.get('project_id', 'Unknown Project')}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        h1 {{
            color: #1a73e8;
            border-bottom: 3px solid #1a73e8;
            padding-bottom: 10px;
        }}
        h2 {{
            color: #5f6368;
            margin-top: 30px;
        }}
        h3 {{
            color: #202124;
        }}
        .metadata {{
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }}
        .metadata p {{
            margin: 5px 0;
        }}
        .summary {{
            background-color: #e8f0fe;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }}
        .severity-high {{
            color: #d93025;
            font-weight: bold;
        }}
        .severity-medium {{
            color: #f9ab00;
            font-weight: bold;
        }}
        .severity-low {{
            color: #188038;
            font-weight: bold;
        }}
        .finding {{
            margin-bottom: 30px;
            padding: 20px;
            border-left: 4px solid #e0e0e0;
            background-color: #fafafa;
        }}
        .finding.high {{
            border-left-color: #d93025;
        }}
        .finding.medium {{
            border-left-color: #f9ab00;
        }}
        .finding.low {{
            border-left-color: #188038;
        }}
        .severity-table {{
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }}
        .severity-table th, .severity-table td {{
            border: 1px solid #e0e0e0;
            padding: 10px;
            text-align: left;
        }}
        .severity-table th {{
            background-color: #f8f9fa;
            font-weight: bold;
        }}
        .recommendation {{
            background-color: #e8f5e9;
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
        }}
        .footer {{
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #e0e0e0;
            color: #5f6368;
            font-size: 0.9em;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>GCP Security Audit Report</h1>
        
        <div class="metadata">
            <p><strong>Generated:</strong> {metadata.get('timestamp', 'N/A')}</p>
            <p><strong>Project:</strong> {metadata.get('project_id', 'N/A')}</p>
            <p><strong>Organization:</strong> {metadata.get('organization_id', 'N/A')}</p>
        </div>
        
        <h2>Executive Summary</h2>
        <div class="summary">
            {self._generate_html_summary(findings)}
        </div>
        
        <h2>Severity Breakdown</h2>
        {self._generate_html_severity_table(findings)}
        
        <h2>Detailed Findings</h2>
        {self._generate_html_findings(findings)}
        
        <div class="footer">
            <p><strong>Report Format:</strong> HTML</p>
            <p><strong>Generated By:</strong> Paddi - Multi-Agent Cloud Audit Tool</p>
        </div>
    </div>
</body>
</html>"""
        return html

    def _generate_html_summary(self, findings: List[Dict[str, Any]]) -> str:
        """Generate HTML executive summary"""
        total = len(findings)
        high = sum(1 for f in findings if f.get("severity") == "HIGH")
        medium = sum(1 for f in findings if f.get("severity") == "MEDIUM")
        low = sum(1 for f in findings if f.get("severity") == "LOW")

        summary = f"<p>The security audit identified <strong>{total} total findings</strong>:</p>"
        summary += "<ul>"
        summary += f'<li>🔴 <span class="severity-high">{high} HIGH</span> severity issues requiring immediate attention</li>'
        summary += f'<li>🟡 <span class="severity-medium">{medium} MEDIUM</span> severity issues to be addressed</li>'
        summary += f'<li>🟢 <span class="severity-low">{low} LOW</span> severity issues for consideration</li>'
        summary += "</ul>"

        if high > 0:
            summary += '<p><strong>⚠️ Action Required:</strong> High severity issues were found that pose significant security risks.</p>'

        return summary

    def _generate_html_severity_table(self, findings: List[Dict[str, Any]]) -> str:
        """Generate HTML severity table"""
        high = sum(1 for f in findings if f.get("severity") == "HIGH")
        medium = sum(1 for f in findings if f.get("severity") == "MEDIUM")
        low = sum(1 for f in findings if f.get("severity") == "LOW")
        total = len(findings)

        table = '<table class="severity-table">'
        table += "<tr><th>Severity</th><th>Count</th><th>Percentage</th></tr>"

        if total > 0:
            table += f'<tr><td class="severity-high">HIGH</td><td>{high}</td><td>{high/total*100:.1f}%</td></tr>'
            table += f'<tr><td class="severity-medium">MEDIUM</td><td>{medium}</td><td>{medium/total*100:.1f}%</td></tr>'
            table += f'<tr><td class="severity-low">LOW</td><td>{low}</td><td>{low/total*100:.1f}%</td></tr>'
        else:
            table += "<tr><td colspan='3'>No findings</td></tr>"

        table += "</table>"
        return table

    def _generate_html_findings(self, findings: List[Dict[str, Any]]) -> str:
        """Generate HTML for detailed findings"""
        html_findings = ""

        # Group by severity
        for severity in ["HIGH", "MEDIUM", "LOW"]:
            severity_findings = [f for f in findings if f.get("severity") == severity]
            if severity_findings:
                html_findings += f'<h3>{severity} Severity Issues</h3>'
                for i, finding in enumerate(severity_findings, 1):
                    severity_class = severity.lower()
                    html_findings += f'<div class="finding {severity_class}">'
                    html_findings += f'<h4>{i}. {finding.get("title", "Untitled Finding")}</h4>'
                    html_findings += f'<p><strong>Severity:</strong> <span class="severity-{severity_class}">{finding.get("severity", "N/A")}</span></p>'
                    html_findings += f'<p><strong>Description:</strong><br>{finding.get("explanation", "No description available.")}</p>'
                    html_findings += '<div class="recommendation">'
                    html_findings += f'<p><strong>Recommendation:</strong><br>{finding.get("recommendation", "No recommendation available.")}</p>'
                    html_findings += "</div>"
                    html_findings += "</div>"

        return html_findings


class AuditReportGenerator:
    """Main orchestrator for generating audit reports"""

    def __init__(
        self,
        input_file: str = "data/explained.json",
        output_dir: str = "output",
        template_dir: Optional[str] = "templates",
    ):
        self.input_file = Path(input_file)
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        self.template_dir = Path(template_dir) if template_dir else None

        # Initialize generators
        md_template = (
            self.template_dir / "report.md.j2"
            if self.template_dir and self.template_dir.exists()
            else None
        )
        html_template = (
            self.template_dir / "report.html.j2"
            if self.template_dir and self.template_dir.exists()
            else None
        )

        self.markdown_generator = MarkdownReportGenerator(md_template)
        self.html_generator = HTMLReportGenerator(html_template)

    def load_findings(self) -> List[Dict[str, Any]]:
        """Load findings from Agent B output"""
        if not self.input_file.exists():
            raise FileNotFoundError(f"Input file not found: {self.input_file}")

        with open(self.input_file, "r", encoding="utf-8") as f:
            return json.load(f)

    def load_metadata(self) -> Dict[str, Any]:
        """Load metadata from original collected data if available"""
        collected_file = self.input_file.parent / "collected.json"
        metadata = {
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "project_id": "Unknown",
            "organization_id": "Unknown",
        }

        if collected_file.exists():
            try:
                with open(collected_file, "r", encoding="utf-8") as f:
                    collected_data = json.load(f)
                    metadata["project_id"] = collected_data.get("project_id", "Unknown")
                    metadata["organization_id"] = collected_data.get(
                        "organization_id", "Unknown"
                    )
                    metadata["collection_timestamp"] = collected_data.get("timestamp", "N/A")
            except Exception as e:
                logger.warning(f"Could not load metadata from collected.json: {e}")

        return metadata

    def generate_reports(self) -> tuple[Path, Path]:
        """Generate both Markdown and HTML reports"""
        logger.info(f"Loading findings from: {self.input_file}")
        findings = self.load_findings()
        metadata = self.load_metadata()

        logger.info(f"Loaded {len(findings)} findings")

        # Generate Markdown report
        logger.info("Generating Markdown report...")
        markdown_content = self.markdown_generator.generate(findings, metadata)
        markdown_path = self.output_dir / "audit.md"
        with open(markdown_path, "w", encoding="utf-8") as f:
            f.write(markdown_content)
        logger.info(f"Markdown report saved to: {markdown_path}")

        # Generate HTML report
        logger.info("Generating HTML report...")
        html_content = self.html_generator.generate(findings, metadata)
        html_path = self.output_dir / "audit.html"
        with open(html_path, "w", encoding="utf-8") as f:
            f.write(html_content)
        logger.info(f"HTML report saved to: {html_path}")

        return markdown_path, html_path


def main(
    input_file: str = "data/explained.json",
    output_dir: str = "output",
    template_dir: Optional[str] = None,
):
    """
    Generate security audit reports from analyzed findings.

    Args:
        input_file: Path to findings data from Agent B
        output_dir: Directory to save generated reports
        template_dir: Optional directory containing Jinja2 templates
    """
    try:
        # Initialize report generator
        generator = AuditReportGenerator(
            input_file=input_file,
            output_dir=output_dir,
            template_dir=template_dir,
        )

        # Generate reports
        md_path, html_path = generator.generate_reports()

        print("✅ Report generation successful!")
        print(f"📄 Markdown report: {md_path}")
        print(f"🌐 HTML report: {html_path}")
        print("")
        print("You can now:")
        print("- Open the Markdown report in Obsidian or any Markdown viewer")
        print("- Open the HTML report in any web browser")

    except FileNotFoundError as e:
        logger.error(f"Input file not found: {e}")
        logger.info("Please run agent_explainer.py first to generate findings data.")
        raise
    except Exception as e:
        logger.error(f"Report generation failed: {e}")
        raise


if __name__ == "__main__":
    fire.Fire(main)