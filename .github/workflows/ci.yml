name: CI

on:
  push:
  pull_request:
    branches: ['main']

permissions:
  contents: read

jobs:
  python-checks:
    name: Python Tests & Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mypy bandit[toml] coverage-badge
          npm install

      - name: Format check with Black
        run: black . --check

      - name: Import sort check with isort
        run: isort . --check

      - name: Lint with flake8
        run: flake8 .

      - name: Lint with pylint
        run: cd app && pylint . --rcfile=../.pylintrc

      - name: Type checking with mypy
        run: mypy app --ignore-missing-imports

      - name: Security scan with bandit
        run: bandit -r app -f json -o bandit-report.json || true

      - name: Run tests with coverage
        run: |
          python -m pytest --cov=app --cov-report=term-missing --cov-report=xml --cov-fail-under=80

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  rust-checks:
    name: Rust Tests & Linting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            cli/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Check formatting
        working-directory: ./cli
        run: cargo fmt -- --check

      - name: Run clippy
        working-directory: ./cli
        run: cargo clippy -- -D warnings

      - name: Run tests
        working-directory: ./cli
        run: cargo test --verbose

      - name: Security audit
        working-directory: ./cli
        run: cargo audit

  integration-tests:
    name: Integration Tests
    needs: [python-checks, rust-checks]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          npm install

      - name: Build Rust CLI
        working-directory: ./cli
        run: cargo build --release

      - name: Run integration tests
        run: |
          # Add integration tests here when available
          echo "Integration tests placeholder"

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: false  # Disabled until Dockerfile is added

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t paddi:test .

      - name: Test Docker image
        run: docker run --rm paddi:test --version
