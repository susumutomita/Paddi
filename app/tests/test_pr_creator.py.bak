"""Tests for PR creator module."""

import json
from unittest.mock import MagicMock, Mock, patch

import pytest
from github import GithubException

from app.remediation.pr_creator import PullRequestCreator


class TestPullRequestCreator:
    """Test PullRequestCreator class."""

    @pytest.fixture
    def creator(self):
        """Create PR creator instance."""
        with patch("app.remediation.pr_creator.Github"):
            return PullRequestCreator(
                github_token="test-token",
                github_owner="test-owner",
                github_repo="test-repo",
                base_branch="main",
            )

    def test_init_no_token(self):
        """Test initialization without token."""
        with pytest.raises(ValueError, match="GitHub token is required"):
            PullRequestCreator()

    def test_init_with_token(self):
        """Test initialization with token."""
        with patch("app.remediation.pr_creator.Github") as mock_github:
            creator = PullRequestCreator(github_token="token")
            assert creator.github_token == "token"
            mock_github.assert_called_once_with("token")

    def test_create_security_fixes_pr_no_findings(self, creator, tmp_path):
        """Test PR creation with no fixable findings."""
        analysis_file = tmp_path / "analysis.json"
        analysis_file.write_text("[]")
        
        result = creator.create_security_fixes_pr(str(analysis_file))
        assert result is None

    def test_create_security_fixes_pr_no_fixes(self, creator, tmp_path):
        """Test PR creation with findings but no fixes."""
        findings = [
            {
                "title": "Test Finding",
                "fix_suggestions": [
                    {"fix": {"code_change": None}}
                ]
            }
        ]
        analysis_file = tmp_path / "analysis.json"
        analysis_file.write_text(json.dumps(findings))
        
        result = creator.create_security_fixes_pr(str(analysis_file))
        assert result is None

    def test_create_security_fixes_pr_github_error(self, creator, tmp_path):
        """Test PR creation with GitHub error."""
        findings = [
            {
                "title": "Test Finding",
                "fix_suggestions": [
                    {"fix": {"code_change": "fix"}}
                ]
            }
        ]
        analysis_file = tmp_path / "analysis.json"
        analysis_file.write_text(json.dumps(findings))
        
        creator._github.get_repo.side_effect = GithubException(404, "Not found")
        
        result = creator.create_security_fixes_pr(str(analysis_file))
        assert result is None

    def test_create_feature_branch(self, creator):
        """Test feature branch creation."""
        mock_repo = Mock()
        mock_ref = Mock()
        mock_ref.object.sha = "abc123"
        mock_repo.get_git_ref.return_value = mock_ref
        creator._repo = mock_repo
        
        creator._create_feature_branch("test-branch")
        
        mock_repo.get_git_ref.assert_called_once_with("heads/main")
        mock_repo.create_git_ref.assert_called_once()

    def test_apply_fixes_empty(self, creator):
        """Test applying fixes with no findings."""
        result = creator._apply_fixes([], "branch")
        assert result == []

    def test_apply_fixes_with_fixes(self, creator):
        """Test applying fixes."""
        mock_repo = Mock()
        mock_file = Mock()
        mock_file.decoded_content = b"old code"
        mock_file.sha = "file-sha"
        mock_repo.get_contents.return_value = mock_file
        creator._repo = mock_repo
        
        findings = [
            {
                "finding": {"title": "Test"},
                "suggestion": {
                    "file": "test.py",
                    "line": 1,
                    "match": "old",
                    "fix": {"code_change": "new"}
                }
            }
        ]
        
        with patch.object(creator, "_commit_changes"):
            result = creator._apply_fixes(findings, "branch")
            assert "test.py" in result

    def test_commit_changes(self, creator):
        """Test committing changes."""
        mock_repo = Mock()
        creator._repo = mock_repo
        
        file_contents = {
            "test.py": {
                "content": "new content",
                "sha": "old-sha",
                "fixes_applied": 1
            }
        }
        
        creator._commit_changes(file_contents, "branch")
        
        mock_repo.update_file.assert_called_once()
        call_args = mock_repo.update_file.call_args
        assert call_args[1]["path"] == "test.py"
        assert call_args[1]["content"] == "new content"

    def test_create_pull_request_success(self, creator):
        """Test successful PR creation."""
        mock_repo = Mock()
        mock_pr = Mock()
        mock_pr.html_url = "https://github.com/test/pr/1"
        mock_repo.create_pull.return_value = mock_pr
        creator._repo = mock_repo
        
        findings = [{
            "finding": {"title": "Test", "severity": "HIGH"},
            "suggestion": {"file": "test.py", "line": 1, "fix": {"description": "Fix"}}
        }]
        files_changed = ["test.py"]
        
        result = creator._create_pull_request("branch", findings, files_changed)
        
        assert result == "https://github.com/test/pr/1"
        mock_repo.create_pull.assert_called_once()
        mock_pr.add_to_labels.assert_called_once_with("security", "automated")

    def test_create_pull_request_failure(self, creator):
        """Test PR creation failure."""
        mock_repo = Mock()
        mock_repo.create_pull.side_effect = GithubException(400, "Bad request")
        creator._repo = mock_repo
        
        result = creator._create_pull_request("branch", [], [])
        assert result is None

    def test_generate_pr_body(self, creator):
        """Test PR body generation."""
        findings = [
            {
                "finding": {
                    "title": "Test Finding",
                    "severity": "HIGH"
                },
                "suggestion": {
                    "file": "test.py",
                    "line": 10,
                    "fix": {"description": "Fix description"}
                }
            }
        ]
        files_changed = ["test.py", "test2.py"]
        
        body = creator._generate_pr_body(findings, files_changed)
        
        assert "Automated Security Fixes" in body
        assert "Test Finding" in body
        assert "test.py" in body
        assert "HIGH Severity" in body

    def test_create_review_comment(self, creator):
        """Test creating review comment."""
        mock_repo = Mock()
        mock_pr = Mock()
        mock_repo.get_pull.return_value = mock_pr
        creator._repo = mock_repo
        
        creator.create_review_comment(1, "test.py", 10, "Test comment")
        
        mock_repo.get_pull.assert_called_once_with(1)
        mock_pr.create_review_comment.assert_called_once()